-- Git Rebase 
Git rebase allows you to move an entire branch to the tip of the other branch.
You run this from the branch you want to move the commits from.
For ex- from feature branch you will run git rebase main that will move all the commits from feature branch to main.

One thing that you will see especially when you run into rebase conflicts is that you first move to the target branch tip and make it the new merge base and then replay your other branch commits so you will find that the <<<<<<<<< HEAD changes will be from your target branch.
Say you run git rebase main from feature branch it will first move to the main branch and then pick all your new commits from feature branch onto main one by one.
If there are any conflict in rebasing then till you fix those conflicts you will stay in a detached Head state so don't get confused about that.

-- Git Reset
Git reset --soft (commit hash or Head~x) command just deletes the last commit without deleting the changes you made.
Git reset --hard (commit hash or Head~x) command deletes all the changes along with the commit (one thing to note is say you made a change to a file that was being tracked by git before those changes will be deleted but say there was a file that wasn't even tracked by it that file won't be deleted cause the last commit didn't have any history of it anyways).
You don't have to use git reset --hard only after to make a commit say you made some changes that you don't find to be that useful you can just write git reset --hard it will just take you to the last commit you made undoing all the changes in tracked files atleast.

-- Git Ignore
.gitignore can have stuff either files or folders that you want to exclude from git tracking
.git/info/exclude is a file that you can add random stuff to and those things will be ignored locally from being tracked(The point of that is let's say you make up things like temp and you output some data from you program into it like ./a.out > temp but you don't want to put temp into .gitignore cause that file will be seen by everyone cause your .git/info/exclude doesn't get pushed to the github repo).


-- Git Reflog 
-- A use case for git reflog down below

git reflog
e0aedc3 (HEAD -> main, origin/add_contrib) HEAD@{0}: checkout: moving from add_contrib to main
e0aedc3 (HEAD -> main, origin/add_contrib) HEAD@{1}: checkout: moving from main to add_contrib
e0aedc3 (HEAD -> main, origin/add_contrib) HEAD@{2}: commit: add myself as contributor
0d16f95 (origin/main, origin/HEAD) HEAD@{3}: clone: from https://github.com/ankitkkataria/megacorp.git

gsw -c slander
Switched to a new branch 'slander'

ls
 contributors   customers   orgs   scripts   README.md

nvim slander.md (adding some contants here)
gaa
gcm "slander"
[slander a7d1582] slander
 1 file changed, 1 insertion(+)
 create mode 100644 slander.md

ls
 contributors   customers   orgs   scripts   README.md   slander.md

git reflog
a7d1582 (HEAD -> slander) HEAD@{0}: commit: slander
e0aedc3 (origin/add_contrib, main) HEAD@{1}: checkout: moving from main to slander
e0aedc3 (origin/add_contrib, main) HEAD@{2}: checkout: moving from add_contrib to main
e0aedc3 (origin/add_contrib, main) HEAD@{3}: checkout: moving from main to add_contrib
e0aedc3 (origin/add_contrib, main) HEAD@{4}: commit: add myself as contributor
0d16f95 (origin/main, origin/HEAD) HEAD@{5}: clone: from https://github.com/ankitkkataria/megacorp.git

gsw -
Switched to branch 'main'
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

ls
 contributors   customers   orgs   scripts   README.md

git branch -D slander
Deleted branch slander (was a7d1582).

git reflog
e0aedc3 (HEAD -> main, origin/add_contrib) HEAD@{0}: checkout: moving from slander to main
a7d1582 HEAD@{1}: commit: slander
e0aedc3 (HEAD -> main, origin/add_contrib) HEAD@{2}: checkout: moving from main to slander
e0aedc3 (HEAD -> main, origin/add_contrib) HEAD@{3}: checkout: moving from add_contrib to main
e0aedc3 (HEAD -> main, origin/add_contrib) HEAD@{4}: checkout: moving from main to add_contrib
e0aedc3 (HEAD -> main, origin/add_contrib) HEAD@{5}: commit: add myself as contributor
0d16f95 (origin/main, origin/HEAD) HEAD@{6}: clone: from https://github.com/ankitkkataria/megacorp.git

gsw -c recoveringSlander
Switched to a new branch 'recoveringSlander'
ls
 contributors   customers   orgs   scripts   README.md

git reflog
e0aedc3 (HEAD -> recoveringSlander, origin/add_contrib, main) HEAD@{0}: checkout: moving from main to recoveringSlander
e0aedc3 (HEAD -> recoveringSlander, origin/add_contrib, main) HEAD@{1}: checkout: moving from slander to main
a7d1582 HEAD@{2}: commit: slander
e0aedc3 (HEAD -> recoveringSlander, origin/add_contrib, main) HEAD@{3}: checkout: moving from main to slander
e0aedc3 (HEAD -> recoveringSlander, origin/add_contrib, main) HEAD@{4}: checkout: moving from add_contrib to main
e0aedc3 (HEAD -> recoveringSlander, origin/add_contrib, main) HEAD@{5}: checkout: moving from main to add_contrib
e0aedc3 (HEAD -> recoveringSlander, origin/add_contrib, main) HEAD@{6}: commit: add myself as contributor
0d16f95 (origin/main, origin/HEAD) HEAD@{7}: clone: from https://github.com/ankitkkataria/megacorp.git

git merge a7d1582
Updating e0aedc3..a7d1582
Fast-forward
 slander.md | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 slander.md

ls
 contributors   customers   orgs   scripts   README.md   slander.md
(As you can see using reflog we got back the deleted change)

Or you could have done it this way
git merge HEAD@{2} (You don't even need to copy the commit hash)

-- One other way of doing the same thing but this not common cause it just requires you going into the weeds of git.
git switch main
Switched to branch 'main'
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

git branch -D recoveringSlander 
Deleted branch recoveringSlander (was a7d1582).

ls
 contributors   customers   orgs   scripts   README.md

git reflog
e0aedc3 (HEAD -> main, origin/add_contrib) HEAD@{0}: checkout: moving from recoveringSlander to main
a7d1582 HEAD@{1}: merge a7d1582: Fast-forward
e0aedc3 (HEAD -> main, origin/add_contrib) HEAD@{2}: checkout: moving from main to recoveringSlander
e0aedc3 (HEAD -> main, origin/add_contrib) HEAD@{3}: checkout: moving from slander to main
a7d1582 HEAD@{4}: commit: slander
e0aedc3 (HEAD -> main, origin/add_contrib) HEAD@{5}: checkout: moving from main to slander
e0aedc3 (HEAD -> main, origin/add_contrib) HEAD@{6}: checkout: moving from add_contrib to main
e0aedc3 (HEAD -> main, origin/add_contrib) HEAD@{7}: checkout: moving from main to add_contrib
e0aedc3 (HEAD -> main, origin/add_contrib) HEAD@{8}: commit: add myself as contributor
0d16f95 (origin/main, origin/HEAD) HEAD@{9}: clone: from https://github.com/ankitkkataria/megacorp.git

git cat-file -p a7d1582
tree 1047247e570df5bb523d6ecd88b82614c1f9976c
parent e0aedc36241bd5ba61eadb2d895e5002d125fc2a
author ankitkkataria <ankitkkataria@gmail.com> 1750598271 +0530
committer ankitkkataria <ankitkkataria@gmail.com> 1750598271 +0530
slander

git cat-file -p 1047247e570df5bb523d6ecd88b82614c1f9976c
100644 blob 13b4fae17d1b50828697a36c4ab337039018a35e	README.md
040000 tree f4b451ad0aa5c63374faa2b345be4c5f522bdda7	contributors
040000 tree f408a5791812c598240e2e5e30759675a33957e8	customers
040000 tree 3f24c2dac3af70dc3af6713f686d4f57d9608a42	orgs
040000 tree 87e79e11ffc811016818fe57ab91fac55cb5a8b8	scripts
100644 blob 6f6b544d1a3605ed85b3645784e2773e3564fc25	slander.md

git cat-file -p 6f6b544d1a3605e
meow meow <--- (now you can copy the file contents from here (-p just pipes the cat output into the terminal normal cat won't work here it is a different cat called git cat-file))

-- Merge Conflicts
git checkout --theirs path-to-the-file-you-have-merge-confilts-in(as can be seen in git status after a merge conflict arises) 
The command above will basically take their changes in that file and discard ours.
git checkout --ours path-to-the-file-you-have-merge-confilts-in(as can be seen in git status after a merge conflict arises) 
The command above will basically take our changes in that file and discard theirs.

-- Squashing commits
It's exactly what it sounds like. We take all the changes from a series of commits and squash them into a single commit.

How to Squash? 
Perhaps confusingly, squashing is done with the git rebase command! Here are the steps to squash the last n commits:

Start an interactive rebase with the command git rebase -i HEAD~n, where n is the number of commits you want to squash.
Git will open your default editor with a list of commits. Change the word pick to squash for all but the first commit.
Save and close the editor.
The -i flag stands for "interactive," and it allows us to edit the commit history before Git applies the changes. HEAD~n is how we reference the last n commits. HEAD points to the current commit (as long as we're in a clean state) and ~n means "n commits before HEAD."

Why Does Rebase Squash?
Remember, rebase is all about replaying changes. When we rebase onto a specific commit (HEAD~n), we're telling Git to replay all the changes from the current branch on top of that commit. Then we use the interactive flag to "squash" those changes so that Rebase will apply them all in a single commit.

-- Git Stash
Git stash takes your changes in the worktree (or tracked files) no matter if they were staged or not staged and just stores it in a stack somewhere and later you can pop it off.
People use it when let's say you have to pull on a branch from remote to get the new changes but the current changes aren't that much for you to make a proper commit so you temporarily stash these changes run git pull and then git stash pop.
People also do it for stashing changes while switching branches

git stash list (lists out all the stashes you have)
git stash drop (will remove the most recent stash without applying it to your codebase)
git stash apply (applies the stash but not pop it from the stack (not sure where this would be used though))
git stash apply stash{@2} will apply a particular stash to your codebase
git stash drop{@2}(will drop a particular stash)

-- Git Revert 
What revert does it takes a commit hash and just removes the changes from that particular commit hash and makes a new commit that doesn't contain that particular commit changes that's it.
You can just try making a random commit and then try reverting that commit by git revert <commit hash>

-- Git Diff 
git diff shows you your current worktree changes compared to the last commit
git diff HEAD~1 shows you your current worktree changes compared to the last commit
git diff HEAD~2 shows you your current worktree changes compared to the last second commit
git diff ccommit-hash-1 commit-hash-2 commit shows the difference between these two commits 

-- Git Cherry-Pick 
git cherry-pick just allows you to pick only a single commit and brings that particular commit changes only to your branch.
people use it when they don't want to transfer over all the commits from some other branch.
git cherry-pick --abort aborts a cherry-pick process

-- Git Bisect 
Git Bisect basically uses binary search to find a commit in which a bug was introduced or a improvement was made or a regressive change was made or a file was introduced etc...
As long as you can test something quickly for a commit you can just go using binary search to each commit and discard the rest.

How to Bisect
There are effectively 7 steps to bisecting:

Start the bisect with git bisect start
Select a "good" commit with git bisect good <commitish> (a commit where you're sure the bug wasn't present)
Select a bad commit via git bisect bad <commitish> (a commit where you're sure the bug was present)
Git will checkout a commit between the good and bad commits for you to test to see if the bug is present
Execute git bisect good or git bisect bad to say the current commit is good or bad
Loop back to step 4 (until git bisect completes)
Exit the bisect mode with git bisect reset

-- Down below is an example of me finding where in which commit I added a minifiles.lua file to my directory using git bisect (I had more than 80 commits and if I went through them one by one it would've taken an eternity but with git bisect it only took a few secs)

git bisect start

git bisect bad (for bad commit if you don't provide a commit initially it just takes the latest one)

git bisect good 8f4b09e
Bisecting: 35 revisions left to test after this (roughly 5 steps)
[6f4b886926a098690a0005cb6fe4fbf73cbce0a5] really happy with this
find . -name "minifiles.lua"
./lua/plugins/minifiles.lua

git bisect bad
Bisecting: 17 revisions left to test after this (roughly 4 steps)
[a5464e86e1bda33da4e36217cc1a384f8b63aa65] really happy with this
find . -name "minifiles.lua"
./lua/plugins/minifiles.lua

git bisect bad
Bisecting: 8 revisions left to test after this (roughly 3 steps)
[0eb7d42b3014c31a6739ba7fb649b8f4b4086c96] fix path for base64 plugin
find . -name "minifiles.lua"

git bisect good
Bisecting: 4 revisions left to test after this (roughly 2 steps)
[c3d1fb646a04aaa97b2929b90269f8a7bf8e8dc4] Update chadrc.lua
find . -name "minifiles.lua"

git bisect good
Bisecting: 2 revisions left to test after this (roughly 1 step)
[85404dcb03bda6badc55cec998b3bdbe76b81138] add example for blink users
find . -name "minifiles.lua"

git bisect good
Bisecting: 0 revisions left to test after this (roughly 1 step)
[e09a25b9fbc47351f987cbd17469e55f5459eead] No need to tinker with NvChad's sourcefiles anymore
find . -name "minifiles.lua"
./lua/plugins/minifiles.lua

git bisect bad
Bisecting: 0 revisions left to test after this (roughly 0 steps)
[30fb442906c04454f8274890778d1b7c84e4ab7c] Happy with this
find . -name "minifiles.lua"
./lua/plugins/minifiles.lua

git bisect bad
30fb442906c04454f8274890778d1b7c84e4ab7c is the first bad commit
commit 30fb442906c04454f8274890778d1b7c84e4ab7c
Author: ankitkkataria <ankitkkataria@gmail.com>
Date:   Sat May 17 16:30:05 2025 +0530

    Happy with this

 init.lua                  |  18 +++++
 lazy-lock.json            |  37 ++++++++++
 lua/chadrc.lua            |   2 +-
 lua/configs/lspconfig.lua |   9 ++-
 lua/mappings.lua          | 109 +++++++++++++++++++++++++++--
 lua/options.lua           |   5 +-
 lua/plugins/init.lua      |  77 ++++++++++++++++++++-
 lua/plugins/minifiles.lua | 170 ++++++++++++++++++++++++++++++++++++++++++++++
 8 files changed, 415 insertions(+), 12 deletions(-)
 create mode 100644 lazy-lock.json
 create mode 100644 lua/plugins/minifiles.lua (As you can see it here is where I created this particular file)

Normally when people find a bad commit they revert it so the changes made in that commit are undoed in the latest commit (I don't know how that would look here in my case)
