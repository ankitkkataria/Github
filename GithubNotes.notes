What Is Github ?
Github is a hosting platform for git repositories. You can put your own Git repos on Github and access them from anywhere and share them with people around the world.
Beyond hosting repos, Github also provides additional collaboration features that are not native to Git (but are super useful). Basically, Github helps people share and collaborate on repos.

Git :-
Git is the version control software that runs locally on your machine. You don't need to register for an account. You don't need the internet to use it. You can use Git without ever touching Github.

Github :- 
Github is a service that hosts Git repositories in the cloud and makes it easier to collaborate with other people. You do need to sign up for an account to use Github. It's an online place to share work that is done using Git.

Why use Github ?
Obviously backup and collaboration are two things but even beyond that there are some factors that are in favor of github.

1.Open Source Projects
Today Github is THE home of open source projects on the Internet. Projects ranging from React to Swift are hosted on Github.
If you plan on contributing to open source projects, you'll need to get comfortable working with Github.

2.Exposure
Your Github profile showcases your own projects and contributions to others' projects.
It can act as a sort of resumé that many employers will consult in the hiring process. Additionally, you can gain some attention on the platform for creating or contributing to popular projects.

3.Stay Up To Date
Being active on Github is the best way to stay up to date with the projects and tools you rely on. Learn about upcoming changes and the decisions/debate behind them.


Cloning :-
So far we've created our own Git repositories from scratch, but often we want to get a local copy of an existing repository instead.
To do this, we can clone a remote repository hosted on Github or similar websites. All we need is a URL that we can tell Git to clone for use.
For this purpose we have a git command called (git clone <url>). Do remember this git clone is a git commad not a github specific command as long as you put in a link to a git repository in place of <url> it will be cloned in your pc it doesn't matter if that repository is hosted on github, bitbucket, gitlab or some personal hosting platform.
So, git clone is not bound to github as of such.
Finally,
To clone a repo, simply run git clone Git will retrieve all the files associated with the repository and will copy them to your local machine.
In addition, Git initializes a new repository on your machine, giving you access to the full Git history of the cloned project.
NOTE: Always make sure that you're not in a git repository already before running the git clone command using git status cause then you'll be having nested git repositories and that's not good me still have to learn why that's the case.
In place of <url> just try copying any github repository. 

Permissions ?
Anyone can clone a repository from Github, provided the repo is public. You do not need to be an owner or collaborator to clone the repo locally to your machine. You just need the URL from Github. If you can see a repo that's mean it's public otherwise you won't even have been able to access it anyways.
Pushing up your own changes to the Github repo...that's another story entirely. You need permission to do that cause then anyone can delete the entire repository after cloning and push!

One more thing :-
We are not limited to Github Repos. git clone is a standard git command. It is NOT tied specifically to Github. We can use it to clone repositories that are hosted anywhere. It just happens that most of the hosted repos are on Github these days.

How Do I Get My Code On Github ?

There are two ways :-
Option 1 :- Existing Repo
If you already have an existing repo locally that you want to get on Github„.
Then we shall go by this procedure :-
• Create a new repo on Github
• Connect your local repo (add a remote)
• Push up your changes to Github

Option 2 :- Start From Scratch
If you haven't begun work on your local repo, you can...
• Create a brand new repo on Github
• Clone it down to your machine (Then it will automatically know which github repo it's connected to and you won't have to do that manually.)
• Do some work locally
• Push up your changes to Github

Remote :- 
Before we can push anything up to Github, we need to tell Git about our remote repository on Github. We need to setup a "destination" to push up to.
In Git, we refer to these "destinations" as remotes (You can think of it as remote repositories). Each remote is simply a URL where a hosted repository lives.

Viewing Remotes :-
To view any existing remotes for your repository, we can run git remote or git remote -v (verbose, for more info)
This just displays a list of remotes. If you haven't added any remotes yet, you won't see anything!

Adding A New Remote :-
A remote is really two things: a URL and a label. (label is just a pnemonic or other a variable that means the same thing as that url so instead of saying git push <url> you can just write git push origin (origin is commonly a name given to remotes/remote repositories))
To add a new remote, we need to provide both to Git.
git remote add <name> <url> // name can be anything it need not be origin similarly for url it can be anything also.
We use git remote add <name> <url> from repositories that are already existing in your local machine and you'd like them to be connected to some github repository.
Example :-
git remote add origin https://github.com/blah/repo.git
This is basically saying,
Okay Git, anytime I use the name "origin", I'm referring to this particular Github repo URL.

Why Origin ?
Origin is a conventional Git remote name, but it is not at all special. It's just a name for a URL.
When we clone a Github repo, the default remote name setup for us is called origin. You can change it. Most people leave it.

Example :- (Not used commonly)
git remote add mygithuburl https://github.com/blah/repo.git
This is basically saying,
Okay Git, anytime I use the name "mygithuburl", I'm referring to this particular Github repo URL.

After you add a remote (remote repository) using the git remote add command in order to check if it got successfully added :-      
Try viewing your remotes with git remote -v, and you should now see a remote showing up. 
Remember, by setting up a remote we are just telling Git about a remote repository URL. We have not "communicated" with the Github repo at all yet.

Some other commands :- 
They are not commonly used, but there are commands to rename and delete remotes if needed. (All this remotes means is just URLs that your local project is aware of like my project knows my remote/remote_url is nothing but origin (Which in itself is representation of a URL)).
git remote rename <old name><space><new name>
git remote remove <name> // If you would like to remove a remote you can use this command.

// Something we will see later is that it's common for projects to have multiple remotes. So, you might even have to remove a remote if needed. That's where these commands come in.

Pushing :-
Now that we have a remote set up, let's push some work up to Github!
To do this, we need to use the git push command.
We need to specify the remote(remote repo) we want to push up to AND the specific local branch we want to push up to that remote.
Syntax:- git push <remote/remote-repo> <local-branch-name> // There can be multiple remotes too that's why that can also be set which remote would you like to push your code upto. Second thing is the branch you might not want to push all the branches of your project upto github that's why you can also specify even which specific branch you'd like to push up.
Example:- git push origin main // This line will push the main branch of our project to the origin remote (again by remote I mean remote repository). Ofcourse I'm assuming that my remote/remote repo is named origin. One more thing is that you don't need to be on the branch that you're pushing upto github while being on main branch you can push other branches as well and vice-versa it's just common that people switch to the branch that they are pushing just to see what exactly they are pushing.

This is something that I found about -u option later we will learn about it from Colt as well.
One thing you might note is when you look at github and when it's tutoring you on how to push your existing repo you might notice a -u flag (git push -u origin main) what does it do ?
In simple terms :-
Technically, the -u flag adds a tracking reference to the upstream server you are pushing to.
What is important here is that this lets you do a git pull without supplying any more arguments. For example, once you do a git push -u origin master, you can later call git pull and git will know that you actually meant git pull origin master. 
Otherwise, you'd have to type in the whole command. 
So, git push -u origin main is the same as git push origin main ; git branch --set-upstream main origin/main.
If you forget to use the -u option, type git push -u immediately will be OK.

Please go through these slides as well :- https://www.canva.com/design/DAEPtdekgz0/L9rfbid7gCFMGEZBLJcmlw/view?utm_content=DAEPtdekgz0&utm_campaign=designshare&utm_medium=link&utm_source=sharebutton

Normally what people do is they don't push every single branch that they make locally to github rather what they do is they clone the project make a new branch other than the main branch and then they just go ahead and make the changes that they need to make and merge it with the main branch and then just push things.
But obviously that's not something that's necessary to do you can also push whatever branch of your project you'd like.

git branch -m main or git branch -M main can be used to change the master branch's name to main. (If you go and make a empty repo in github and then clone it will by default have the first branch called main not master.)


Fetching/Pulling
Slides :- https://www.canva.com/design/DAEPyYicrxQ/EaXIXD_WWryEq7Z7YUSVlg/view?utm_content=DAEPyYicrxQ&utm_campaign=designshare&utm_medium=link&utm_source=sharebutton

Note: When you do git clone something.
      You get your entire branches on top that you get your branch reference like master which points to a commit. And let's say you only have one branch called master on the remote repo origin. 
      But along with the normal master branch reference you also get a Remote Tracking Branch Reference. Which is nothing but a reference to the state of the master branch on the remote/remote repo. I can't move this myself. It's like a bookmark pointing to the last known commit on the master branch on origin.

Remote Tracking Branches :-
"At the time you last communicated with this remote repository, here is where x branch was pointing"
They follow this pattern <remote>/<branch>.
• origin/master references the state of the master branch on the remote repo named origin.
• upstream/logoRedesign references the state of the logoRedesign branch on the remote named upstream (a common remote name).

To see your remote tracking branches just type git remote -r.

When you clone it both the references will be pointing at the same commit.
But when you just go ahead and make more commits locally only your local branch reference will move not the remote one.
And when you type git status it will show you're this many commits ahead of 'origin/master' (which is nothing but the master branch on the remote origin)
If you do git checkout origin/master it will take you to the detached HEAD state and make the HEAD point to the remote tracking branch reference.
Again you can make a new branch from there or look around whatever you can when you are normally in the detached HEAD state.
Now, To switch back to where you were before detached HEAD state just type git switch -
If you do git push now all these changes/commits will be synced up with the remote repo.
And since you just communicated with the remote repo the remote tracking branch will also be moved to the latest commit.
And if you type git status now it will say your branch is up to date with 'origin/main'.

Let's say your project on github has a lot of branches.
And you just go ahead and clone it.
Will you get all the branches on your local machine too ?
Nope, Initially you'll only get the default branch whatever that may be main/master/whatever.
Say for example your project has two branches master and puppies.
Now you clone it.
Once you've cloned a repository, we have all the data and Git history for the project at that moment in time.
However, that does not mean it's all in my workspace!
The github repo has a branch called puppies, but when I run git branch I don't see it on my machine. All I see is the master branch. What's going on ?
That's cause you'll only have the dafault branch initially.
But if you type git branch -r you'll see both the branches. So, Our local branches that were added after it was fetched or cloned nor will it show git origin/master for example has moved at all cause it really doesn't have any idea of what happend in the rempte branch after you  know about the remote branches.got this work in your local repo.
By default, my master branch is already tracking origin/ master. I didn't connect these myself!
But I don't have a puppies branch locally that's connected to the origin/puppies.
One thing I can do is do git checkout origin/puppies locally that will take me in detached HEAD state and I'll be able to see whatever is on that branch but I still can't make commits like I can on the master branch and have it show oh you're 1 commit ahead of origin/master.
With checkout you can only see what was there or make a new branch from that point.
But If you want to have a local puppies branch that's connected to origin/puppies just use git switch puppies.
What that will do is if there is a remote branch by the name of puppies it will just go ahead and get the puppies branch to your pc locally and have it connected to the origin/puppies.
But if no branch by the name of puppies exist either locally or on origin it will show reference error.
So, just run git switch <remote-branch-name> to create a new local branch from the remote branch of the same name. git switch puppies makes me a local puppies branch AND sets it up to track the remote branch origin/ puppies. After this command you'll be switched to puppies branch locally too.

NOTE!
The new command git switch makes this super easy to do!
It used to be slightly more complicated using git checkout.
git checkout --track origin/puppies

This is what you'll see when you type git switch puppies if a puppies remote branch exists.
Switched to a new branch 'puppies'
branch 'puppies' set up to track 'origin/puppies'.

Fetching :- Must go through slides.
Let's say you have a github repo with 2 commits.
And you clone it you'll get both those commits in your local repo too.
Now let's say you add another commit locally.
And during this duration someone added a few commits to the github repo to the same branch also.
Now if you do git pull it might have issues merging with your local files.
But that's where git fetch comes in.
Again please go through the slides.

Fetching allows us to download changes from a remote repository, BUT those changes will not be automatically integrated into our working files.
It lets you see what others have been working on, without having to merge those changes into your local repo.
Think of it as "please go and get the latest information from Github, but don't screw up my working directory."
It will just give you another branch of the latest commits that will be separate from the current commits to see this in action just look at the slides. You can now use it to checkout and see what changes were made by going into detached HEAD state.
This way it doesn't mess up your working directory.

The git fetch <remote> command fetches branches and history from a specific remote repository. It only updates remote tracking branches.
git fetch origin would fetch all changes from the origin remote repository.
git fetch <remote>
If not specified, <remote> defaults to origin.
Doing this will fetch all the remote branches.

We can also fetch a specific branch from a remote using git fetch <remote> <branch>
For example, git fetch origin master would retrieve the latest information from the master branch on the origin remote repository.

git fetch doesn't just help us in the case where we have extra commits on the remote repo and we just would like to see what those changes are.

One more thing git fetch can be used for is like let's say someone added an new branch on remote repo now your local repo really has no idea about it even if you type git branch -r it will still show you the old information as it only shows you the information it had stored when you cloned it.
But if you type git fetch origin or git fetch (as it defaults to origin anyways)
It will fetch the latest information not just about the branches we have but also about these new branches that were not there before.
Now you can type git branch -r and it will show you the new remote branches.
Now you can just do git switch origin/newBranchName and it will be accessed locally.

After you do git fetch origin puppies it will bring the latest changes that were made in the remote repo and put them in your local repo (by local repo I mean the .git folder) but not in the working directory.
You can now just go ahead and do git checkout origin/puppies to see the newly fetched changes and what they looked like.
Then when you go and do git switch - you'll be taken back to where you were again.

One thing to remember is when you do git clone or git fetch it stores the latest information about this repo in the .git folder after that any changes that occur in the remote repo it really doesn't have any idea.
So, even if you do git branch -r it won't show you the new branches that were added after it was fetched or cloned nor will it show git origin/master for example has moved at all cause it really doesn't have any idea of what happend in the rempte branch after you got this work in your local repo.

Pulling :-
git pull is another command we can use to retrieve changes from a remote repository. Unlike fetch, pull actually updates our HEAD branch with whatever changes are retrieved from the remote. 
"Go and download data from Github AND immediately update my local repo with those changes"

So, Basically
git pull = git fetch + git merge
By git fetch I mean update the remote tracking branch with the latest changes from the remote repository in my local repository.
By git merge I mean update my current branch with whatever changes are on the remote tracking branch.

git pull :-
To pull, we specify the particular remote and branch we want to pull using git pull <remote> <branch>. Just like with git merge, it matters WHERE we run this command from. Whatever branch we run it from is where the changes will be merged into.
git pull origin master would fetch the latest information from the origin's master branch and merge those changes into our current branch whichever we're currently on.

git pull can sometimes lead to merge conflicts as well if there are updates in my local directory in some file and in the same file someone else might have done some work and pushed it to github.
To deal with this resolve the merge conflicts normally and then add and commit the changes.
Once commited you can go ahead and push your changes.

Now, One more thing before you do git push on anything it's a good practice to do git pull before that just so we are sure there weren't any changes that we would want to include in our push.
So, first do git pull and then do git push that's a good practice to go by.

An even easier syntax for git pull!
If we run git pull without specifying a particular remote or branch to pull from, git assumes the following :-
• remote will default to origin
• branch will default to whatever tracking connection (origin/puppies) is configured for your current branch (puppies).
Note: This behavior can be configured, and tracking connections can be changed manually. Most people dont mess with that stuff.

The syntax git pull origin master is certainly important when you have more than 1 remotes.
Like you might want to do git pull upstream master. (But git pull directly will just assume origin).


